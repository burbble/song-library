definitions:
  internal_interfaces_http_handler.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  song-library_internal_application_dto.CreateSongRequest:
    properties:
      group:
        type: string
      song:
        type: string
    required:
    - group
    - song
    type: object
  song-library_internal_application_dto.SongListResponse:
    properties:
      page:
        type: integer
      page_size:
        type: integer
      songs:
        items:
          $ref: '#/definitions/song-library_internal_application_dto.SongResponse'
        type: array
      total:
        type: integer
      total_pages:
        type: integer
    type: object
  song-library_internal_application_dto.SongResponse:
    properties:
      created_at:
        type: string
      group_name:
        type: string
      id:
        type: integer
      link:
        type: string
      release_date:
        type: string
      song_name:
        type: string
      text:
        type: string
      updated_at:
        type: string
    type: object
  song-library_internal_application_dto.SongTextResponse:
    properties:
      group_name:
        type: string
      id:
        type: integer
      page:
        type: integer
      page_size:
        type: integer
      song_name:
        type: string
      total_pages:
        type: integer
      total_verses:
        type: integer
      verses:
        items:
          type: string
        type: array
    type: object
  song-library_internal_application_dto.UpdateSongRequest:
    properties:
      group_name:
        type: string
      link:
        type: string
      release_date:
        type: string
      song_name:
        type: string
      text:
        type: string
    required:
    - group_name
    - release_date
    - song_name
    type: object
info:
  contact: {}
paths:
  /api/v1/songs:
    get:
      description: Gets a list of songs with filtering and pagination
      parameters:
      - description: Group name
        in: query
        name: group_name
        type: string
      - description: Song name
        in: query
        name: song_name
        type: string
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Page size
        in: query
        name: page_size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/song-library_internal_application_dto.SongListResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/internal_interfaces_http_handler.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/internal_interfaces_http_handler.ErrorResponse'
      summary: List of songs
      tags:
      - songs
    post:
      consumes:
      - application/json
      description: Creates a new song based on group and title
      parameters:
      - description: Song data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/song-library_internal_application_dto.CreateSongRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/song-library_internal_application_dto.SongResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/internal_interfaces_http_handler.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/internal_interfaces_http_handler.ErrorResponse'
      summary: Create a new song
      tags:
      - songs
  /api/v1/songs/{id}:
    delete:
      description: Deletes a song by ID
      parameters:
      - description: Song ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/internal_interfaces_http_handler.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/internal_interfaces_http_handler.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/internal_interfaces_http_handler.ErrorResponse'
      summary: Delete a song
      tags:
      - songs
    get:
      description: Gets a song by ID
      parameters:
      - description: Song ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/song-library_internal_application_dto.SongResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/internal_interfaces_http_handler.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/internal_interfaces_http_handler.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/internal_interfaces_http_handler.ErrorResponse'
      summary: Get a song
      tags:
      - songs
    put:
      consumes:
      - application/json
      description: Updates an existing song by ID
      parameters:
      - description: Song ID
        in: path
        name: id
        required: true
        type: integer
      - description: Update data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/song-library_internal_application_dto.UpdateSongRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/song-library_internal_application_dto.SongResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/internal_interfaces_http_handler.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/internal_interfaces_http_handler.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/internal_interfaces_http_handler.ErrorResponse'
      summary: Update a song
      tags:
      - songs
  /api/v1/songs/{id}/text:
    get:
      consumes:
      - application/json
      description: Returns the song text, split into verses with pagination
      parameters:
      - description: Song ID
        in: path
        name: id
        required: true
        type: integer
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Page size
        in: query
        name: page_size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/song-library_internal_application_dto.SongTextResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/internal_interfaces_http_handler.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/internal_interfaces_http_handler.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/internal_interfaces_http_handler.ErrorResponse'
      summary: Get song text with pagination by verses
      tags:
      - songs
swagger: "2.0"
